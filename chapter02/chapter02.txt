第二章 列表和元组
数据结构 —— 以某种形式组合起来的多个数据元素的集合
Python最基本的数据结构是序列sequence，序列中的每个元素都有从0开始计数的一个标号（惯例源自C语言，标号代表偏移量）
Python允许使用负数为索引下标访问序列元素，从序列末尾逆序遍历

第一节 序列概述
	Python内置多种序列，本书重点讨论其中两种：列表和元组
	列表和元组的不同之处：列表可修改，元组不可以（禁止修改是出于技术方面的原因，与Python无关）
					   几乎所有的情况下元组都可以用列表来代替，使用元组作为字典键的情况除外

第二节 通用的序列操作 —— 索引、切片、相加、相乘、元素contains检查、迭代	
	一、索引
		使用负数下标从序列末尾逆序访问序列元素，负数下标不能低于 -1 * 序列元素个数
			>>> greeting='Hello'
			>>> greeting[0]
			'H'
			>>> greeting="久仰阁下大名"
			>>> greeting[0]
			'久''
			>>> len(greeting)
			6
			>>> len(greeting.encode("UTF-8"))
			18
			>>> greeting[-1] #使用负数下标从序列末尾逆序访问序列元素
			'名'
			>>> greeting[-7] #IndexError: string index out of range，负数下标不能低于 -1 * 序列元素个数
			>>> greeting[-6]
			'久'

		序列元素的加法和乘法
			>>> endings = ['st', 'nd', 'rd'] + 17 * ['th'] \
			...             + ['st', 'nd', 'rd'] + 7 * ['th'] \10
			...             +['st']
			>>> print(endings)
			['st', 'nd', 'rd', 'th', 'th', 'th', 'th', 'th', 'th', 'th', 'th', 'th', 'th', 'th', 'th', 'th', 'th', 'th', 'th', 'th', 'st', 'nd', 'rd', 'th', 'th', 'th', 'th', 'th', 'th', 'th', 'st']

	二、切片slicing —— 访问特定范围内的元素
			>>> tag = """<a href="https://www.python.org">Python Web</a>"""
			>>> tag[9:31] #Python不仅仅可以用单个下标来访问单个元素，还能使用两个下标之间的范围（包前不包后）的子集
			'https://www.python.org'
			>>> tag[33:-4]
			'Python Web'
		绝妙的简写 —— 切片操作时左右边界数的灵活机变
			>>> numbers = [1,2,3,4,5,6,7,8,9,10]
			>>> numbers[3:6]
			[4, 5, 6]
			>>> numbers[0:1]
			[1]
			>>> numbers[7:11]
			[8, 9, 10]
			>>> numbers[7:12]
			[8, 9, 10]
			>>> numbers[7:110]	#左右边界数不受数组元素个数的限制，绝对值超过之后无意义
			[8, 9, 10]
			>>> numbers[7:-4]
			[]
			>>> numbers[7:-5]
			[]
			>>> numbers[-3:]
			[8, 9, 10]
			>>> numbers[-3]
			8
			>>> numbers[:3]
			[1, 2, 3]
			>>> numbers[:]	  #左右边界数任一空缺默认为包含相应方向的所有元素
			[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
		更大的步长
			切片操作的第三个参数：步长，默认为1，步长为默认值的时候可以不写出来，即上述情形
			>>> numbers[::1]
			[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
			>>> numbers[::2]
			[1, 3, 5, 7, 9]
			>>> numbers[1::2]
			[2, 4, 6, 8, 10]
			>>> numbers[3:6:4]
			[4]

	三、序列相加：可以使用加法运算符来拼接序列,不同类型的序列不能进行此操作
			>>> [1,2,3]+[4,5,6]
			[1, 2, 3, 4, 5, 6]
			>>> 'Hello,'+'Python'
			'Hello,Python'

	四、序列乘法：将序列与正整数x相乘，将重复这个序列x次来创建一个新序列
			>>> '哈！'*3
			'哈！哈！哈！'
			>>> [42]*5
			[42, 42, 42, 42, 42]
			>>> 'Orange Camel'*3
			'Orange CamelOrange CamelOrange Camel'

	五、成员资格检查 —— 可以使用运算符in检查特定值是否包含在序列中，返回True或False
			>>> permissions = 'rw'
			>>> 'w' in permissions
			True
			>>> 'x' in permissions
			False
			>>> users = ['mlh','foo','bar']
			>>> input("Enter your name:") in users
			Enter your name:mlh
			True
			>>> input("Enter your name:") in users
			Enter your name:zj
			False
			>>> subject = '$$$ Get Rich Now! $$$'  #这个例子有点例外的地方 —— '$$$'并非subject的元素，而是它的一个子字符串；早期的Python并不支持这种写法，但是现在支持了
			>>> '$$$' in subject
			True

	六、长度、最大值、最小值 len、min、max
			>>> subject = '$$$ Get Rich Now! $$$'
			>>> '$$$' in subject
			True
			>>> len(subject)
			21
			>>> max(subject)
			'w'
			>>> min(subject)
			' '

第三节 列表：Python的主力
	列表是可变的，可以修改其内容

	一、函数list
		>>> list("Hello")
		['H', 'e', 'l', 'l', 'o']
		>>> list("惟江上之清风，与山间之明月，吾与子之所共适")
		['惟', '江', '上', '之', '清', '风', '，', '与', '山', '间', '之', '明', '月', '，', '吾', '与', '子', '之', '所', '共', '适']
		>>> list([9,8,7,6,5,4,3])
		[9, 8, 7, 6, 5, 4, 3]

	二、基本的列表操作
		修改列表，给元素赋值 x[2] = 3
			>>> x = [9, 8, 7, 6, 5, 4, 3]
			>>> x[2] = 3
			>>> x
			[9, 8, 3, 6, 5, 4, 3]
		删除元素 —— del语句 (单个del语句只能删除一个元素，删除多个元素建议使用切片赋值方法)
			>>> del x[2]
			>>> x
			[9, 8, 6, 5, 4, 3]
		给切片赋值
			>>> name = list("Perl")
			>>> name[2:] = list("ar")
			>>> name
			['P', 'e', 'a', 'r']
			>>> name[1:]=list("ython")
			>>> name
			['P', 'y', 't', 'h', 'o', 'n']
			>>> numbers = [1,5]
			>>> numbers[1:1]=[2,3,4] #在序列中插入一个序列
			>>> numbers
			[1, 2, 3, 4, 5]
			>>> numbers[1:4] = [] 	 #从一个序列中删除一个序列
			>>> numbers
			[1, 5]
			>>> numbers = [0,1,2,3,4,5,6,7,8,9]
			>>> numbers[1::2] = [2,4,6,8,10] 	#步长不为1的切片赋值
			>>> numbers
			[0, 2, 2, 4, 4, 6, 6, 8, 8, 10]
			>>> numbers = [0,1,2,3,4,5,6,7,8,9]

	三、列表方法
		append方法 —— 将单个元素添加到列表的末尾，无返回值，不会产生新的列表
			>>> lst = [1,2,3]
			>>> lst.append(4)
			>>> lst
			[1, 2, 3, 4]
			>>> lst.append([5,6])
			>>> lst
			[1, 2, 3, 4, [5, 6]]
			>>> lst[4] = 5
			>>> lst
			[1, 2, 3, 4, 5]
			>>> lst[5] = 6
			Traceback (most recent call last):
			  File "<stdin>", line 1, in <module>
			IndexError: list assignment index out of range  #直接用下标赋值的方法不能为列表添加元素
		insert方法 —— 将一个元素插入列表
			>>> a
			[1, 2, 3, 4, 5, 6]
			>>> a.insert(3,'four') #等价于a[3:3] = ['four']
			>>> a
			[1, 2, 3, 'four', 4, 5, 6]
			>>> a[3:3] = [3]
			>>> a
			[1, 2, 3, 3, 'four', 4, 5, 6]
			>>> a[3:5] = [4]
			>>> a
			[1, 2, 3, 4, 4, 5, 6]
			>>> a[3:3] = []
			>>> a
			[1, 2, 3, 4, 4, 5, 6]
			>>> a[3:4] = []
			>>> a
			[1, 2, 3, 4, 5, 6]
		extend方法 —— 将多个元素（切片）添加到列表末尾，无返回值，不产生新的列表 —— 有等价的切片操作, 也等价于序列的加法操作 a.extend(b) |  a[len(a):]=b | a = a + b
			>>> a = [1,2,3]
			>>> b = [4,5,6]
			>>> a.extend(b)
			>>> a
			[1, 2, 3, 4, 5, 6]
			>>> a[3:] = []
			>>> a
			[1, 2, 3]
			>>> a[3:] = b
			>>> a
			[1, 2, 3, 4, 5, 6]
			>>> a[3:] = []
			>>> a
			[1, 2, 3]
			>>> a = a + b
			>>> a
			[1, 2, 3, 4, 5, 6]
			>>> a[3:] = []
			>>> 
			>>> a[len(a):]=b #可读性不高
			>>> a
			[1, 2, 3, 4, 5, 6]
		pop方法 —— 从列表中删除并返回某个元素（未给定下标的话默认为最后一个元素）
			>>> a
			[1, 2, 3, 4, 5, 6]
			>>> a.pop()
			6
			>>> a
			[1, 2, 3, 4, 5]
			>>> a.pop(0)
			1
			>>> a
			[2, 3, 4, 5]
		clear方法 —— 清空列表所有元素; 类似于赋值语句lst[:]=[]
			>>> lst
			[1, 2, 3, 4, 5]
			>>> lst.clear()
			>>> lst
			[]
		copy方法 —— 列表复制使用copy方法；常规复制只是将另一个名称关联到列表
			>>> lst = [1,2,3,4]
			>>> arr = lst  #此处应该使用lst.copy()
			>>> arr[2] = 5 #此处本意是修改新的列表的元素，不是真正的复制所以导致错误
			>>> lst
			[1, 2, 5, 4]
			>>> lst = [1,2,3,4]
			>>> arr = lst.copy() #这句话等同于 arr = lst[:]或者 arr = list(a)
			>>> lst
			[1, 2, 3, 4]
			>>> arr[3] = 5
			>>> lst
			[1, 2, 3, 4]
			>>> arr
			[1, 2, 3, 5]
		count方法 —— 计算指定的元素在列表中出现的次数
			>>> lst = [1,2,1,[1,1],[2,1,[1,2]]]
			>>> lst.count(1)
			2
			>>> ['to','be','or','not','to','be'].count('to')
			2
			>>> ['to','be','or','not','to','be'].count('or')
			1
			>>> ['to','be','or','not','to','be'].count('be')
			2
			>>> lst.count([1,1])
			1
			>>> lst.count([1,2])
			0
		index方法 —— 在列表中查找指定值第一次出现的索引（前提：特定值 in lst，否则报错）
			[1, 2, 3, 4, 5, 6]
			>>> a.index(2)
			1
			>>> ['we','are','the','knights','who','say','ni'].index('who')
			4
			>>> ['we','are','the','knights','who','say','ni'].index('ni')
			6
		reverse方法 —— 将列表中的元素逆序排列，无返回值，不产生新的列表
			>>> a
			[2, 3, 4, 5]
			>>> a.reverse()
			>>> a
			[5, 4, 3, 2]
		sort方法 —— 对列表就地排序，无返回值，不产生新的列表
			>>> a
			[5, 4, 3, 2]
			>>> a.sort()
			>>> a
			[2, 3, 4, 5]
			>>> str = ['we','are','the','knights','who','say','ni']
			>>> str.sort()
			>>> str
			['are', 'knights', 'ni', 'say', 'the', 'we', 'who']
		高级排序 —— sort接受两个可选参数，key（相当于comparator）和reverse(True或False)
			>>> str = ['we','are','the','knights','who','say','ni']
			>>> str.sort()
			>>> str
			['are', 'knights', 'ni', 'say', 'the', 'we', 'who']
			>>> str.sort(key=len)
			>>> str
			['ni', 'we', 'are', 'say', 'the', 'who', 'knights']
			>>> str.sort(key=len,reverse=True)
			>>> str
			['knights', 'are', 'say', 'the', 'who', 'ni', 'we']

第四节 元组：不可修改的序列
	将元素用逗号连接起来就是元组，空元组可以使用圆括号表示
	元组也是序列，但不可修改
	函数tuple的作用和list很类似，将一个序列转换成元组
	元组的元素访问、切片操作与列表相同
		>>> 42
		42
		>>> 42,
		(42,)
		>>> ()
		()
		>>> 1,2,3
		(1, 2, 3)
		>>> a = 1,2,4
		>>> a
		(1, 2, 4)
		>>> tuple("You Are Not Alone")
		('Y', 'o', 'u', ' ', 'A', 'r', 'e', ' ', 'N', 'o', 't', ' ', 'A', 'l', 'o', 'n', 'e')
		>>> tuple([1,2,3,4])
		(1, 2, 3, 4)
		>>> a[1]
		2
		>>> a[-1]
		4
		>>> a + (5,6,7)
		(1, 2, 4, 5, 6, 7)
		>>> a[1:]
		(2, 4)
		>>> a
		(1, 2, 4)
	元组的作用：① 用作映射中的键（以及集合的元素），列表无法实现此功能 ②某些内置函数的返回值是元组，所以必须和元组打交道